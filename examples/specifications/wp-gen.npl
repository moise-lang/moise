/*
    This program was automatically generated from
    the organisation specification 'wp'
    on aprile 09, 2025 - 11:35:54

    This is a MOISE tool, see more at https://moise-lang.github.io

*/

scope organisation(wp) {


   // Role hierarchy
   subrole(author,soc).
   subrole(editor,author).
   subrole(writer,author).

   // f* rules implement the role hierarchy transitivity
   // t* rules implement the transitivity of some relations

   // fplay(A,R,G) is true if A play R in G or if A play a subrole of R in G
   fplay(A,R,G) :- play(A,R,G).
   fplay(A,R,G) :- subrole(R1,R) & fplay(A,R1,G).

   // fcompatible(R1,R2,S) is true if R1 or its sub-roles are compatible with R2 in scope S
   fcompatible(R1,R2,S) :- tsubrole(R1,R2).
   fcompatible(R1,R2,S) :- tsubrole(R1,R1a) & tsubrole(R2,R2a) & compatible(R1a,R2a,S).
   fcompatible(R1,R2,S) :- tcompatible(R1,R2,S,[R1,R2]).
   tcompatible(R1,R2,S,Path) :- compatible(R1,R3,S) & not .member(R3,Path) & tcompatible(R3,R2,S,[R3|Path]).
   tsubrole(R,R).
   tsubrole(R1,R2)    :- subrole(R1,R2).
   tsubrole(R1,R2)    :- subrole(R1,R3) & tsubrole(R3,R2).


scope group(wpgroup) {

   // ** Facts from OS
   role_cardinality(editor,1,1).
   role_cardinality(writer,1,5).

   compatible(editor,writer,gr_inst).
   compatible(writer,editor,gr_inst).

   // ** Rules
   rplayers(R,G,V)    :- .count(play(_,R,G),V).
   well_formed(G) :-
      rplayers(editor,G,Veditor) & Veditor >= 1 & Veditor <= 1 &
      rplayers(writer,G,Vwriter) & Vwriter >= 1 & Vwriter <= 5 &
      .findall(GInst, subgroup(GInst,_,G), ListSubgroups) & all_subgroups_well_formed(ListSubgroups).
   all_subgroups_well_formed([]).
   all_subgroups_well_formed([H|T]) :- subgroup_well_formed(H) & all_subgroups_well_formed(T).

   // ** Properties check 
   norm role_in_group:  
           play(Agt,R,Gr) &
           group_id(Gr) &
           not role_cardinality(R,_,_)
        -> fail(role_in_group(Agt,R,Gr)).
   norm role_cardinality:  
           group_id(Gr) &
           role_cardinality(R,_,RMax) &
           rplayers(R,Gr,RP) &
           RP > RMax
        -> fail(role_cardinality(R,Gr,RP,RMax)).
   norm role_compatibility: true
        -> prohibition(Agt,true,
               play(Agt,R1,Gr) &
               play(Agt,R2,Gr) &
               group_id(Gr) &
               R1 < R2 &
               not fcompatible(R1,R2,gr_inst),
               `never`).
   norm well_formed_responsible:  
           responsible(Gr,S) &
           not well_formed(Gr)
        -> fail(well_formed_responsible(Gr)).
   norm subgroup_in_group:  
           group_id(Gr) &
           subgroup(G,GT,Gr) &
           not subgroup_cardinality(GT,_,_)
        -> fail(subgroup_in_group(G,GT,Gr)).
   norm subgroup_cardinality:  
           group_id(Gr) &
           subgroup_cardinality(SG,_,SGMax) &
           .count(subgroup(_,SG,Gr),SGP) &
           SGP > SGMax
        -> fail(subgroup_cardinality(SG,Gr,SGP,SGMax)).
} // end of group wpgroup

scope scheme(writePaperSch) {

   // ** Facts from OS

   // mission_cardinality(mission id, min, max)
   mission_cardinality(mColaborator,1,5).
   mission_cardinality(mManager,1,1).
   mission_cardinality(mBib,1,1).

   // mission_role(mission id, role id)
   mission_role(mManager,editor).
   mission_role(mBib,writer).
   mission_role(mColaborator,writer).

   // mission_goal(mission id, goal id)
   mission_goal(mColaborator,wsecs).
   mission_goal(mManager,wconc).
   mission_goal(mManager,wsectitles).
   mission_goal(mManager,wtitle).
   mission_goal(mManager,wp).
   mission_goal(mManager,wabs).
   mission_goal(mBib,wrefs).

   // goal(missions, goal id, dependence (on goal statisfaction), type, #ags to satisfy, ttf)
   goal([],sv,dep(and,[finish]),performance,0,`1 year`).
   goal([mManager],wconc,dep(and,[wsecs]),performance,all,`1 day`).
   goal([mManager],wsectitles,dep(and,[wabs]),performance,all,`1 day`).
   goal([mManager],wtitle,dep(and,[]),performance,all,`1 day`).
   goal([mBib],wrefs,dep(and,[wsecs]),performance,all,`1 hour`).
   goal([],fdv,dep(and,[wsectitles]),performance,0,`1 year`).
   goal([mManager],wp,dep(and,[sv]),performance,all,`5 seconds`).
   goal([],finish,dep(and,[wconc, wrefs]),performance,0,`1 year`).
   goal([mColaborator],wsecs,dep(and,[fdv]),performance,all,`7 days`).
   goal([mManager],wabs,dep(and,[wtitle]),performance,all,`1 day`).
   super_goal(wp, sv).
   super_goal(finish, wconc).
   super_goal(fdv, wsectitles).
   super_goal(fdv, wtitle).
   super_goal(finish, wrefs).
   super_goal(wp, fdv).
   super_goal(sv, finish).
   super_goal(sv, wsecs).
   super_goal(fdv, wabs).

   // notificationPolicy(policy id, target id, condition formula)

   // report(report id, policy id)

   // argument(report id, functor, arity)

   // raisingGoal(goal id, report id, when condition)

   // handlingGoal(goal id, report id, when condition)

   // contextGoal(goal id, report id)

   // requestingGoal(goal id, report id, when condition)

   // accountingGoal(goal id, report id, when condition)

   // treatmentGoal(goal id, report id, when condition)

   // ** Rules
   mplayers(M,S,V) :- .count(committed(_,M,S),V).
   well_formed(S) :- 
      (mission_accomplished(S,mColaborator) | not mission_accomplished(S,mColaborator) & mplayers(mColaborator,S,VmColaborator) & VmColaborator >= 1 & VmColaborator <= 5) &
      (mission_accomplished(S,mManager) | not mission_accomplished(S,mManager) & mplayers(mManager,S,VmManager) & VmManager >= 1 & VmManager <= 1) &
      (mission_accomplished(S,mBib) | not mission_accomplished(S,mBib) & mplayers(mBib,S,VmBib) & VmBib >= 1 & VmBib <= 1).
   is_finished(S) :- satisfied(S,wp).
   mission_accomplished(S,M) :- .findall(Goal, mission_goal(M,Goal), MissionGoals) & all_satisfied(S,MissionGoals).
   all_satisfied(_,[]).
   all_satisfied(S,[G|T]) :- satisfied(S,G) & all_satisfied(S,T).
   any_satisfied(S,[G|_]) :- satisfied(S,G).
   any_satisfied(S,[G|T]) :- not satisfied(S,G) & any_satisfied(S,T).

   all_released(_,[]).
   all_released(S,[G|T]) :- released(S,G) & all_released(S,T).
   all_satisfied_released(_,[]).
   all_satisfied_released(S,[G|T]) :- (satisfied(S,G) | released(S,G)) & all_satisfied_released(S,T).

   // enabled goals (i.e. dependence between goals)
   enabled(S,G) :- goal(_, G,  dep(or,PCG), _, NP, _) & not (requestingGoal(G,_,_) | accountingGoal(G,_,_) | treatmentGoal(G,_,_) | raisingGoal(G,_,_) | handlingGoal(G,_,_)) & NP \== 0 & (any_satisfied(S,PCG) | all_released(S,PCG)).
   enabled(S,G) :- goal(_, G, dep(and,PCG), _, NP, _) & not (requestingGoal(G,_,_) | accountingGoal(G,_,_) | treatmentGoal(G,_,_) | raisingGoal(G,_,_) | handlingGoal(G,_,_)) & NP \== 0 & all_satisfied_released(S,PCG).

   enabled(S,RG) :- raisingGoal(RG,E,When) &
                    When &
                    notificationPolicy(NPol,_,Condition) &
                    report(E,NPol) &
                    Condition &
                    goal(_, RG,  Dep, _, NP, _) & NP \== 0 & 
                    ((Dep = dep(or,PCG)  & (any_satisfied(S,PCG) | all_released(S,PCG))) |
                     (Dep = dep(and,PCG) & all_satisfied_released(S,PCG))
                    ).
   enabled(S,HG) :- handlingGoal(HG,E,When) &
                    When &
                    raised(E,_,_) &
                    raisingGoal(RG,E,_) &
                    satisfied(S,RG) &
                    goal(_, HG,  Dep, _, NP, _) & NP \== 0 &
                    ((Dep = dep(or,PCG)  & (any_satisfied(S,PCG) | all_released(S,PCG))) |
                     (Dep = dep(and,PCG) & all_satisfied_released(S,PCG))
                    ).
   enabled(S,RG) :- requestingGoal(RG,A,When) &
                    When &
                    notificationPolicy(NPol,_,Condition) &
                    report(A,NPol) &
                    Condition &
                    (not contextGoal(CG,A) | (contextGoal(CG,A) & satisfied(S,CG))) &
                    goal(_, RG,  Dep, _, NP, _) & NP \== 0 & 
                    ((Dep = dep(or,PCG)  & (any_satisfied(S,PCG) | all_released(S,PCG))) |
                     (Dep = dep(and,PCG) & all_satisfied_released(S,PCG))
                    ).
   enabled(S,AG) :- accountingGoal(AG,A,When) &
                    When &
                    requestingGoal(RG,A,_) &
                    satisfied(S,RG) &
                    goal(_, AG,  Dep, _, NP, _) & NP \== 0 & 
                    ((Dep = dep(or,PCG)  & (any_satisfied(S,PCG) | all_released(S,PCG))) |
                     (Dep = dep(and,PCG) & all_satisfied_released(S,PCG))
                    ).
   enabled(S,TG) :- treatmentGoal(TG,A,When) &
                    When &
                    account(A,_,_) &
                    accountingGoal(AG,A,_) &
                    satisfied(S,AG) &
                    goal(_, TG,  Dep, _, NP, _) & NP \== 0 &
                    ((Dep = dep(or,PCG)  & (any_satisfied(S,PCG) | all_released(S,PCG))) |
                     (Dep = dep(and,PCG) & all_satisfied_released(S,PCG))
                    ).

   super_satisfied(S,G) :- super_goal(SG,G) & satisfied(S,SG).

   // ** Norms

   // --- Properties check ---
   norm mission_left:  
           leaved_mission(Agt,M,S) &
           not mission_accomplished(S,M)
        -> fail(mission_left(Agt,M,S)).
   norm ach_not_enabled_goal:  
           done(S,G,Agt) &
           mission_goal(M,G) &
           not mission_accomplished(S,M) &
           not (enabled(S,G) | satisfied(S,G))
        -> fail(ach_not_enabled_goal(S,G,Agt)).
   norm ach_not_committed_goal:  
           done(S,G,Agt) &
           .findall(M, mission_goal(M,G) &
           (committed(Agt,M,S) | mission_accomplished(S,M)), [])
        -> fail(ach_not_committed_goal(S,G,Agt)).
   norm mission_permission:  
           committed(Agt,M,S) &
           not (mission_role(M,R) &
           responsible(Gr,S) &
           fplay(Agt,R,Gr))
        -> fail(mission_permission(Agt,M,S)).
   norm mission_cardinality: true
        -> prohibition(Agt,true,
               scheme_id(S) &
               mission_cardinality(M,_,MMax) &
               mplayers(M,S,MP) &
               MP > MMax,
               `never`).
   norm fail_not_enabled_goal:  
           failed(S,G) &
           mission_goal(M,G) &
           not mission_accomplished(S,M) &
           not enabled(S,G)
        -> fail(fail_not_enabled_goal(S,G)).
   norm exc_unknown:  
           raised(E,Ag,Args) &
           not report(E,_)
        -> fail(exc_unknown(S,E,Ag)).
   norm exc_agent_not_allowed:  
           raised(E,Ag,Args) &
           report(E,_) &
           mission_goal(M,TG) &
           raisingGoal(TG,E,_) &
           not committed(Ag,M,S)
        -> fail(exc_agent_not_allowed(S,E,Ag)).
   norm exc_condition_not_holding:  
           raised(E,Ag,Args) &
           report(E,NP) &
           notificationPolicy(NP,_,Condition) &
           not (raisingGoal(TG,E,_) &
           (Condition | done(S,TG,Ag)))
        -> fail(exc_condition_not_holding(S,E,Ag,Condition)).
   norm ach_thr_goal_exc_not_raised:  
           done(S,TG,Ag) &
           raisingGoal(TG,E,_) &
           not super_goal(_,TG) &
           not raised(E,Ag,Args)
        -> fail(ach_thr_goal_exc_not_raised(S,G,E,Ag)).
   norm exc_arg_not_ground:  
           raised(E,Ag,Args) &
           report(E,_) &
           .member(Arg,Args) &
           not .ground(Arg)
        -> fail(exc_arg_not_ground(S,E,Arg)).
   norm exc_arg_missing:  
           raised(E,Ag,Args) &
           report(E,_) &
           argument(E,ArgFunctor,ArgArity) &
           not (.member(Arg,Args) &
           Arg=..[ArgFunctor,T,A] &
           .length(T,ArgArity))
        -> fail(exc_arg_missing(S,E,ArgFunctor,ArgArity)).
   norm exc_arg_unknown:  
           raised(E,Ag,Args) &
           report(E,_) &
           .member(Arg,Args) &
           Arg=..[ArgFunctor,T,A] &
           .length(T,ArgArity) &
           not argument(E,ArgFunctor,ArgArity)
        -> fail(exc_arg_unknown(S,E,Arg)).

   // agents are obliged to fulfill their enabled goals
   norm ngoal: 
           committed(A,M,S) & mission_goal(M,G) & 
           ((goal(_,G,_,achievement,_,D) & What = satisfied(S,G)) | 
            (goal(_,G,_,performance,_,D) & What = done(S,G,A))) &
           well_formed(S) & 
           not satisfied(S,G) & 
           not failed(_,G) & 
           not released(_,G) & 
           not (requestingGoal(G,_,_) | contextGoal(G,_)) & 
           not super_satisfied(S,G)
        -> obligation(A,(enabled(S,G) & not failed(S,G)),What,`now` + D).
} // end of scheme writePaperSch

} // end of organisation wp
